5/17 Discussions - Podcasts and OOP

1. Listen to 2 of the three podcasts. These items are available on multiple sources including the web
and spotify. The podcast is called “The 6 Figure Developer” note in some searches using the number
6 is important to finding them. After watching write 1 or 2 paragraphs about an interesting part(s)
about the episode under the link.

a. Episode 31: Learning a new programing language

https://6figuredev.com/podcast/episode-031-learning-a-new-programming-language/

Learning a new programming language podcast is a discussion in which there is a suggestion
of learning a new programming language every year in depth to specialize in that particular
language or broaden the knowledge by learning different languages different technologies.

Podcast also discusses about Benefits of learning new programming languages:

Some people who are working in a particular language platform might be forced to learn the
same language in depth in order get the work done. For some people learning new language makes
them expert in that language which thereby help in marketing themselves in the professional field.
Also learning new language and new technologies is a key to higher salary. It also makes you
proficient in solving problem which you may come across everyday.

Continuous learning is another point in the podcast which tells that as there is new languages and
new technologies evolving and changing all the time, there is always a need to keep learning. Also
it talks about setting a goal before starting to learn a new language based on the purpose, if it is
for the personal growth or depending on the job requirement in a particular company.

Every language has a core structure once you know one language it might be easy to learn new language.
Once you know how to program, it is easy to use the logic and learn new language. When learning a new
language it would be good idea to start with some project to explore new technology, using a lot of
online resources, the result can be accomplished.

b. Episode 27: Code Reviews and Pull Requests
https://6figuredev.com/podcast/episode-027-code-reviews-and-pull-requests/

Code review is to take a look at someone else’s code for potential bugs or to improve things.
It is intended to find mistakes overlooked in software development, improving the overall quality of
software. Code review is not to make fun of others code. It is supposed to be good natured and not
negative.

In this video, the talk is all about the process, pros and cons of code review process.

Who - Developers, co-workers can have their code reviewed by their supervisor or a senior developer.
Sometimes senior developers too get their code review done by junior developers.

What - chunks of a project once the developer feels it is working good can get code review done.

When - Code review is very helpful when done when the code is small.

Why - the intention behind the code review is to find mistakes overlooked in software development,
improving the quality of software.

How - Reviews are done in various forms such as pair programming, informal walkthroughs, and formal
inspections. Code review is done by pull requests, checks for any bugs, add recommendation comments
(not negative comments).


c. Episode 04 – Agile and ALM with David Corbin
https://6figuredev.com/podcast/episode-004-agile-and-alm-with-david-corbin/

In this podcast the discussion is with David Corbin who talks about Agile, ALM, DevOps, TDD, and more!

ALM is Application Lifecycle Management from the time of start of the software program to the end.
He explains what Agile is an iterative approach to project management and software development that
helps teams deliver value to their customers faster and with fewer headaches. An agile team delivers
work in small, but consumable, increments. David talks about changing the requirements and not missing
requirements or wrong requirements. He also talks about waterfall approach which does not take up
changes in between the software development life cycle. He tells whatever approach works for one company
can be worst for another companies.

2. Come up with the definition for the following terms and consider a real life example of the concept.

Abstraction: Abstraction in C# is used to show only the essential behavior of an object. In case of
abstraction we know how an object can be used but do not know how it is implemented.

For example a mobile phone has two different aspects, user aspects and engineer aspects. For a user,
mobile manufacturer hides the Engineer aspects which is necessary only when he has to give his mobile
to service centre. But when the user click on the numbers to make call he don't have to care about what’s
happening there inside after pressing buttons, he just enjoys calling, so in this way abstraction provides
easiness, simplicity to the user. The user do not have to worry about the Engineering aspects of the mobile.

Encapsulation:It is the process of binding data members and methods together in a unit. Each class itself
is an example of encapsulation. Encapsulation is achieved by the process of data hiding which is keeping
the internal data safe from unauthorised access that is no one can access our internal data directly.
We can achieve data hiding programmatically by declaring data members as private,so that outside person
can access our data through public method which will validate the user by asking username and password
but can not access directly.

For example in a bank many people have their accounts, and the bank software is implemented in such a
way to keep all accounts safe they declare balance variable as private so that whoever access those
private members only through methods defined inside that class,and this method will be asking them the
account holder username and password for authentication. So by using the concept of data hiding, security
is achieved.

Polymorphism: Polymorphism is ability to process objects differently depending on their data type or
class. It is often expressed as ‘One interface, multiple functions’.

The real life example to show polymorphism is - Fruits is one object which can be used in different
forms like fruit juice, fruit milkshake, fruit salad etc.

Inheritance: Inheritance is one of the important feature of OOP. Inheritance is the ability to create
a derived class (child) that inherits the attributes and behaviours of the base class (parent class).

Example for Inheritance is an Animal class which is like a parent class which has many body parts like
eyes, mouth, nose, ears, legs, etc. So any animals like Tigers, lions, elephants etc, which inherits
the attributes and behaviours of the parent class - Animal is known as the derived class or the child class.